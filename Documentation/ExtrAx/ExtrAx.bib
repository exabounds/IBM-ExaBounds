

@inproceedings{mariani2015cf,
  address =       {New York, NY, USA},
  author =        {Mariani, Giovanni and Anghel, Andreea and
                   Jongerius, Rik and Dittmann, Gero},
  booktitle =     {Proceedings of the 12th ACM International Conference
                   on Computing Frontiers},
  pages =         {31:1--31:8},
  publisher =     {ACM},
  series =        {CF '15},
  title =         {Scaling Application Properties to Exascale},
  year =          {2015},
  doi =           {10.1145/2742854.2742860},
  isbn =          {978-1-4503-3358-0},
  url =           {http://doi.acm.org/10.1145/2742854.2742860},
}

@unpublished{mariani201Xclassification,
  author =        {Mariani, Giovanni and Anghel, Andreea and
                   Jongerius, Rik and Dittmann, Gero},
  title =         {Classification of Thread Profilles for Scaling
                   Application Behavior},
}

@article{wu2012,
  address =       {New York, NY, USA},
  author =        {Wu, Xing and Mueller, Frank},
  journal =       {ACM Trans. Program. Lang. Syst.},
  month =         may,
  number =        {1},
  pages =         {5:1--5:29},
  publisher =     {ACM},
  title =         {Scala{E}xtrap: Trace-based Communication
                   Extrapolation for SPMD Programs},
  volume =        {34},
  year =          {2012},
  doi =           {10.1145/2160910.2160914},
  issn =          {0164-0925},
  url =           {http://doi.acm.org/10.1145/2160910.2160914},
}

@article{mariani2016ijpp,
  author =        {Mariani, Giovanni and Anghel, Andreea and
                   Jongerius, Rik and Dittmann, Gero},
  journal =       {International Journal of Parallel Programming},
  number =        {5},
  pages =         {975--1002},
  title =         {Scaling Properties of Parallel Applications to
                   Exascale},
  volume =        {44},
  year =          {2016},
  abstract =      {A detailed profile of exascale applications helps to
                   understand the computation, communication and memory
                   requirements for exascale systems and provides the
                   insight necessary for fine-tuning the computing
                   architecture. Obtaining such a profile is challenging
                   as exascale systems will process unprecedented
                   amounts of data. Profiling applications at the target
                   scale would require the exascale machine itself. In
                   this work we propose a methodology to extrapolate the
                   exascale profile from experimental observations over
                   datasets feasible for today's machines. Extrapolation
                   models are carefully selected by means of statistical
                   techniques and a high-level complexity analysis is
                   included in the selection process to speed up the
                   learning phase and to improve the accuracy of the
                   final model. We extrapolate run-time properties of
                   the target applications including information about
                   the instruction mix, memory access pattern,
                   instruction-level parallelism, and communication
                   requirements. Compared to state-of-the-art
                   techniques, the proposed methodology reduces the
                   prediction error by an order of magnitude on the
                   instruction count and improves the accuracy by up to
                   1.3 {\$}{\$}{\backslash}times {\$}{\$} {\texttimes}
                   for the memory access pattern, and by more than 2
                   {\$}{\$}{\backslash}times {\$}{\$} {\texttimes} for
                   the communication requirements.},
  doi =           {10.1007/s10766-016-0412-y},
  issn =          {1573-7640},
  url =           {http://dx.doi.org/10.1007/s10766-016-0412-y},
}

@inproceedings{marin2004,
  address =       {New York, NY, USA},
  author =        {Marin, Gabriel and Mellor-Crummey, John},
  booktitle =     {Proceedings of the Joint International Conference on
                   Measurement and Modeling of Computer Systems},
  pages =         {2--13},
  publisher =     {ACM},
  series =        {SIGMETRICS '04/Performance '04},
  title =         {Cross-architecture Performance Predictions for
                   Scientific Applications Using Parameterized Models},
  year =          {2004},
  doi =           {10.1145/1005686.1005691},
  isbn =          {1-58113-873-3},
  url =           {http://doi.acm.org/10.1145/1005686.1005691},
}

@inproceedings{calotoiu2013,
  address =       {New York, NY, USA},
  author =        {Calotoiu, Alexandru and Hoefler, Torsten and
                   Poke, Marius and Wolf, Felix},
  booktitle =     {Proceedings of the International Conference on High
                   Performance Computing, Networking, Storage and
                   Analysis},
  pages =         {45:1--45:12},
  publisher =     {ACM},
  series =        {SC '13},
  title =         {Using Automated Performance Modeling to Find
                   Scalability Bugs in Complex Codes},
  year =          {2013},
  doi =           {10.1145/2503210.2503277},
  isbn =          {978-1-4503-2378-9},
  url =           {http://doi.acm.org/10.1145/2503210.2503277},
}

@article{anghel2016,
  author =        {Anghel, Andreea and Vasilescu, Laura Mihaela and
                   Mariani, Giovanni and Jongerius, Rik and
                   Dittmann, Gero},
  journal =       {International Journal of Parallel Programming},
  number =        {5},
  pages =         {924--948},
  title =         {An Instrumentation Approach for Hardware-Agnostic
                   Software Characterization},
  volume =        {44},
  year =          {2016},
  abstract =      {Simulators and empirical profiling data are often
                   used to understand how suitable a specific hardware
                   architecture is for an application. However,
                   simulators can be slow, and empirical profiling-based
                   methods can only provide insights about the existing
                   hardware on which the applications are executed.
                   While the insights obtained in this way are valuable,
                   such methods cannot be used to evaluate a large
                   number of system designs efficiently. Analytical
                   performance evaluation models are fast alternatives,
                   particularly well-suited for system design-space
                   exploration. However, to be truly
                   application-specific, they need to be combined with a
                   workload model that captures relevant application
                   characteristics. In this paper we introduce PISA, a
                   framework based on the LLVM infrastructure that is
                   able to generate such a model for sequential and
                   parallel applications by performing
                   hardware-independent characterization.
                   Characteristics such as instruction-level
                   parallelism, memory access patterns and branch
                   behavior are analyzed per thread or process during
                   application execution. To illustrate the potential of
                   the framework, we provide a detailed characterization
                   of a representative benchmark for graph-based
                   analytics, Graph 500. Finally, we analyze how the
                   properties extracted with PISA across Graph 500 and
                   SPEC CPU2006 applications compare to measurements
                   performed on x86 and POWER8 processors.},
  doi =           {10.1007/s10766-016-0410-0},
  issn =          {1573-7640},
  url =           {http://dx.doi.org/10.1007/s10766-016-0410-0},
}

